
ext {
    moduleName = 'org.xbib.elasticsearch.jna'
}

configurations {
    source
    binary
}

sourceSets {
    generated {
        java {
            srcDir "$buildDir/generated-src"
        }
        output.dir("$buildDir/generated-src", builtBy: 'sourceDownload')
    }
    main {
        java {
            srcDirs += sourceSets.generated.java.srcDirs
        }
    }
}

dependencies {
    source "net.java.dev.jna:jna:${property('jna.version')}:sources"
    binary "net.java.dev.jna:jna:${property('jna.version')}"
}

task unpackSource(type: Copy) {
    configurations.source.each {
        from zipTree(it)
        into "${buildDir}/generated-src/java"
        exclude '**/Platform.java'
    }
}

task unpackResources(type: Copy) {
    dependsOn unpackSource
    configurations.binary.each {
        from zipTree(it)
        into "${buildDir}/resources/main"
        include '**/darwin/*.jnilib'
        include '**/linux*/*.so'
        include '**/win*/*.dll'
        include '**/aix*/*.a'
        include '**/freebsd*/*.so'
        include '**/openbsd*/*.so'
        include '**/sunos*/*.so'
    }
}

task renameResources {
    dependsOn unpackResources
    doLast {
        String linuxPath = "${buildDir}/resources/main/com/sun/jna/linux"
        mkdir file(linuxPath)
        ["x32","x64","aarch64","arm","armel","mips64el","ppc","ppc64le","s390x"].each { arch ->
            mkdir file("${linuxPath}/${arch}")
        }
        file("${buildDir}/resources/main/com/sun/jna/linux-x86/libjnidispatch.so")
                .renameTo(file("${linuxPath}/x32/libjnidispatch.so"))
        file("${buildDir}/resources/main/com/sun/jna/linux-x86-64/libjnidispatch.so")
                .renameTo(file("${linuxPath}/x64/libjnidispatch.so"))
        ["aarch64","arm","armel","mips64el","ppc","ppc64le","s390x"].each { arch ->
            file("${buildDir}/resources/main/com/sun/jna/linux-${arch}/libjnidispatch.so")
                    .renameTo(file("${linuxPath}/${arch}/libjnidispatch.so"))
        }

        String aixPath = "${buildDir}/resources/main/com/sun/jna/aix"
        mkdir file(aixPath)
        ["ppc","ppc64"].each { arch ->
            mkdir file("${aixPath}/${arch}")
            file("${buildDir}/resources/main/com/sun/jna/aix-${arch}/libjnidispatch.a")
                    .renameTo(file("${aixPath}/${arch}/libjnidispatch.a"))
        }

        file("${buildDir}/resources/main/com/sun/jna/aix-ppc/libjnidispatch.a")
                .renameTo(file("${aixPath}/ppc/libjnidispatch.a"))
        file("${buildDir}/resources/main/com/sun/jna/aix-ppc64/libjnidispatch.a")
                .renameTo(file("${aixPath}/ppc64/libjnidispatch.a"))

        String freebsdPath = "${buildDir}/resources/main/com/sun/jna/freebsd"
        mkdir file(freebsdPath)
        ["x32","x64"].each { arch ->
            mkdir file("${freebsdPath}/${arch}")
        }
        file("${buildDir}/resources/main/com/sun/jna/freebsd-x86/libjnidispatch.so")
                .renameTo(file("${freebsdPath}/x32/libjnidispatch.so"))
        file("${buildDir}/resources/main/com/sun/jna/freebsd-x86-64/libjnidispatch.so")
                .renameTo(file("${freebsdPath}/x64/libjnidispatch.so"))

        String openbsdPath = "${buildDir}/resources/main/com/sun/jna/openbsd"
        mkdir file(openbsdPath)
        ["x32","x64"].each { arch ->
            mkdir file("${openbsdPath}/${arch}")
        }
        file("${buildDir}/resources/main/com/sun/jna/openbsd-x86/libjnidispatch.so")
                .renameTo(file("${openbsdPath}/x32/libjnidispatch.so"))
        file("${buildDir}/resources/main/com/sun/jna/openbsd-x86-64/libjnidispatch.so")
                .renameTo(file("${openbsdPath}/x64/libjnidispatch.so"))

        String sunosPath = "${buildDir}/resources/main/com/sun/jna/sunos"
        mkdir file(sunosPath)
        ["sparc","sparcv9"].each { arch ->
            mkdir file("${sunosPath}/${arch}")
            file("${buildDir}/resources/main/com/sun/jna/sunos-${arch}/libjnidispatch.so")
                    .renameTo(file("${sunosPath}/${arch}/libjnidispatch.so"))
        }
        ["x32","x64"].each { arch ->
            mkdir file("${sunosPath}/${arch}")
        }
        file("${buildDir}/resources/main/com/sun/jna/sunos-x86/libjnidispatch.so")
                .renameTo(file("${sunosPath}/x32/libjnidispatch.so"))
        file("${buildDir}/resources/main/com/sun/jna/sunos-x86-64/libjnidispatch.so")
                .renameTo(file("${sunosPath}/x64/libjnidispatch.so"))

        String windowsPath = "${buildDir}/resources/main/com/sun/jna/win32"
        mkdir file(windowsPath)
        ["x32","x64"].each { arch ->
            mkdir file("${windowsPath}/${arch}")
        }
        file("${buildDir}/resources/main/com/sun/jna/win32-x86/jnidispatch.dll")
                .renameTo(file("${windowsPath}/x32/jnidispatch.dll"))
        file("${buildDir}/resources/main/com/sun/jna/win32-x86-64/jnidispatch.dll")
                .renameTo(file("${windowsPath}/x64/jnidispatch.dll"))
    }
}

afterEvaluate {
    compileJava {
        dependsOn unpackSource, unpackResources, renameResources
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = ['--module-path', classpath.asPath]
            classpath = files()
        }
    }
    javadoc {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
}

task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

artifacts {
    archives sourcesJar, javadocJar
}
