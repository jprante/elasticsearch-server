apply plugin: 'signing'

import java.time.ZoneOffset
import java.time.ZonedDateTime

esplugin {
    url 'https://github.com/jprante/elasticsearch-server'
    description 'Netty 4 based transport module'
    classname 'org.xbib.elasticsearch.transport.nettyfour/org.elasticsearch.transport.netty4.Netty4Plugin'
}

dependencies {
    compile "org.xbib.elasticsearch:netty:${property('elasticsearch-libs.version')}"
    testCompileOnly project(':server')
    testCompileOnly "org.xbib.elasticsearch:mocksocket:${property('elasticsearch-libs.version')}"
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.transport.nettyfour')
        doFirst {
            options.compilerArgs = [
                    "-Xlint:-try",
                    '--module-path', classpath.asPath

            ]
            classpath = files()
        }
    }
    compileTestJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.transport.nettyfour.test')
        doFirst {
            options.compilerArgs = [
                    "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked",
                    "-proc:none",
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    javadoc {
        enabled = true
        inputs.property("moduleName", 'org.xbib.elasticsearch.transport.nettyfour')
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
    jar {
        inputs.property("moduleName", 'org.xbib.elasticsearch.transport.nettyfour')
        manifest {
            attributes(
                    'Implementation-Title': "${project.group}#${project.name};${project.version}",
                    'Implementation-Version': version,
                    'Implementation-Vendor': "${user}",
                    'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),
                    'Build-Java-Version': System.getProperty("java.version"),
                    'X-Compile-Source-JDK': compileJava.targetCompatibility,
                    'X-Compile-Target-JDK': compileJava.sourceCompatibility,
                    'X-Compile-Elasticsearch-Version': version,
                    'X-Compile-Lucene-Version': project.property('lucene.version'),
                    'X-Compile-Elasticsearch-Snapshot': false
            )
        }
    }
}

configurations {
    archives
}

artifacts {
    archives jar, testJar, javadocJar, sourcesJar, bundlePlugin
}

signing {
    sign jar, testJar, javadocJar, sourcesJar, bundlePlugin
}

apply from: "${rootProject.projectDir}/gradle/publish.gradle"

dependencyLicenses {
    enabled = false
}

test {
    enabled = false
}

randomizedTest {
    enabled = false
}

esTest {
    enabled = false
    /*
     * We have to disable setting the number of available processors as tests in the same JVM randomize processors
      * and will step on each other if we allow them to set the number of available processors as it's set-once in Netty.
     */
    systemProperty 'es.set.netty.runtime.available.processors', 'false'
}

integTest {
    enabled = true

}

integTestRunner {
    enabled = true
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'es.set.netty.runtime.available.processors', 'false'
}

thirdPartyAudit {
    enabled = true
    excludes = [
            'io.netty.util.internal.PlatformDependent0',
            'io.netty.util.internal.PlatformDependent0$1',
            'io.netty.util.internal.PlatformDependent0$2',
            'io.netty.util.internal.PlatformDependent0$3',
            'io.netty.util.internal.PlatformDependent0$5',
            'org.jctools.maps.ConcurrentAutoTable$CAT',
            'org.jctools.maps.NonBlockingHashMap',
            'org.jctools.maps.NonBlockingHashMapLong$CHM',
            'org.jctools.maps.NonBlockingHashMapLong',
            'org.jctools.maps.NonBlockingIdentityHashMap',
            'org.jctools.maps.NonBlockingSetInt',
            'org.jctools.maps.NonBlockingSetInt$NBSI',
            'org.jctools.queues.BaseLinkedQueueConsumerNodeRef',
            'org.jctools.queues.BaseLinkedQueueProducerNodeRef',
            'org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields',
            'org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields',
            'org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields',
            'org.jctools.queues.BaseSpscLinkedArrayQueueConsumerField',
            'org.jctools.queues.BaseSpscLinkedArrayQueueProducerFields',
            'org.jctools.queues.ConcurrentSequencedCircularArrayQueue',
            'org.jctools.queues.LinkedQueueNode',
            'org.jctools.queues.MpmcArrayQueueConsumerIndexField',
            'org.jctools.queues.MpmcArrayQueueProducerIndexField',
            'org.jctools.queues.MpscArrayQueueProducerIndexField',
            'org.jctools.queues.MpscArrayQueueConsumerIndexField',
            'org.jctools.queues.MpscArrayQueueProducerLimitField',
            'org.jctools.queues.MpscLinkedQueue7',
            'org.jctools.queues.MpscLinkedQueue8',
            'org.jctools.queues.SpmcArrayQueueConsumerIndexField',
            'org.jctools.queues.SpmcArrayQueueProducerIndexField',
            'org.jctools.queues.SpscArrayQueueConsumerIndexField',
            'org.jctools.queues.SpscArrayQueueProducerIndexFields',
            'org.jctools.util.UnsafeRefArrayAccess',
            'org.jctools.util.UnsafeAccess',
            'org.jctools.util.UnsafeJvmInfo'
    ]
}

forbiddenApis {
    enabled = true
    excludes = [
            'io.netty.util.internal.PlatformDependent0',
            'io.netty.util.internal.PlatformDependent0$1',
            'io.netty.util.internal.PlatformDependent0$2',
            'io.netty.util.internal.PlatformDependent0$3',
            'io.netty.util.internal.PlatformDependent0$5',
            'org.jctools.maps.ConcurrentAutoTable$CAT',
            'org.jctools.maps.NonBlockingHashMap',
            'org.jctools.maps.NonBlockingHashMapLong$CHM',
            'org.jctools.maps.NonBlockingHashMapLong',
            'org.jctools.maps.NonBlockingIdentityHashMap',
            'org.jctools.maps.NonBlockingSetInt',
            'org.jctools.maps.NonBlockingSetInt$NBSI',
            'org.jctools.queues.BaseLinkedQueueConsumerNodeRef',
            'org.jctools.queues.BaseLinkedQueueProducerNodeRef',
            'org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields',
            'org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields',
            'org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields',
            'org.jctools.queues.BaseSpscLinkedArrayQueueConsumerField',
            'org.jctools.queues.BaseSpscLinkedArrayQueueProducerFields',
            'org.jctools.queues.ConcurrentSequencedCircularArrayQueue',
            'org.jctools.queues.LinkedQueueNode',
            'org.jctools.queues.MpmcArrayQueueConsumerIndexField',
            'org.jctools.queues.MpmcArrayQueueProducerIndexField',
            'org.jctools.queues.MpscArrayQueueProducerIndexField',
            'org.jctools.queues.MpscArrayQueueConsumerIndexField',
            'org.jctools.queues.MpscArrayQueueProducerLimitField',
            'org.jctools.queues.MpscLinkedQueue7',
            'org.jctools.queues.MpscLinkedQueue8',
            'org.jctools.queues.SpmcArrayQueueConsumerIndexField',
            'org.jctools.queues.SpmcArrayQueueProducerIndexField',
            'org.jctools.queues.SpscArrayQueueConsumerIndexField',
            'org.jctools.queues.SpscArrayQueueProducerIndexFields',
            'org.jctools.util.UnsafeRefArrayAccess',
            'org.jctools.util.UnsafeAccess',
            'org.jctools.util.UnsafeJvmInfo'
    ]
}
