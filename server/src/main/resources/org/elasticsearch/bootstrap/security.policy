/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Default security policy file.
// On startup, BootStrap reads environment and adds additional permissions
// for configured paths and network binding to these.

//// SecurityManager impl:
//// Must have all permissions to properly perform access checks

grant codeBase "${codebase.securesm}" {
  permission java.security.AllPermission;
};

//// Very special jar permissions:
//// These are dangerous permissions that we don't want to grant to everything.

grant codeBase "${codebase.elasticsearch}" {
  permission java.util.PropertyPermission "*", "read,write";

  // java.nio.file.TempFileHelper$PosixPermissions.<clinit>(TempFileHelper.java:69)
  permission java.lang.reflect.ReflectPermission "suppressAccessChecks";

  // java.lang.BootstrapMethodError: bootstrap method initialization exception
  // org.elasticsearch.client.Client.<clinit>(Client.java:88)
  permission java.lang.RuntimePermission "accessDeclaredMembers";

  // filesystem walks
  // org.elasticsearch.env.Environment.getFileStore(Environment.java:324)
  permission java.lang.RuntimePermission "loadLibrary.nio";

  // for injection
  permission java.lang.reflect.ReflectPermission "newProxyInPackage.java.lang.invoke";

  // org.elasticsearch.search.fetch.subphase.highlight.FastVectorHighlighter.<clinit> (java.text.BreakIterator)
  permission java.lang.RuntimePermission "localeServiceProvider";

  // needed to create the classloader which allows plugins to extend other plugins
  permission java.lang.RuntimePermission "createClassLoader";
  permission java.lang.RuntimePermission "getClassLoader";

  // max direct memory check in netty
  permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";

  // for injection on Java 12+
  permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.vm.annotation";
};

grant codeBase "${codebase.log4j}" {
  permission java.util.PropertyPermission "*", "read,write";
  permission java.lang.RuntimePermission "getClassLoader";
  permission javax.management.MBeanTrustPermission "register";
  // org.xbib.elasticsearch.log4j/org.apache.logging.log4j.jul.LogManager.<init>(LogManager.java:46)
  permission java.lang.RuntimePermission "shutdownHooks";
  permission java.lang.RuntimePermission "setContextClassLoader";

  // for integration tests / plugins that play with log4j2 LoggerContext start/stop and miss JVM options
  // at java.management/java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:479)
  // at org.xbib.elasticsearch.log4j/org.apache.logging.log4j.core.jmx.Server.unregisterLoggerContext(Server.java:248)
  // at org.xbib.elasticsearch.log4j/org.apache.logging.log4j.core.LoggerContext.stop(LoggerContext.java:340)
  // at org.xbib.elasticsearch.log4j/org.apache.logging.log4j.core.LoggerContext$1.run(LoggerContext.java:281)
  // at org.xbib.elasticsearch.log4j/org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable.run(DefaultShutdownCallbackRegistry.java:109)
  // at org.xbib.elasticsearch.log4j/org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.run(DefaultShutdownCallbackRegistry.java:74)
  permission javax.management.MBeanServerPermission "createMBeanServer";
  permission javax.management.MBeanPermission "*", "registerMBean, unregisterMBean";
  permission javax.management.MBeanTrustPermission "register";
};

grant codeBase "${codebase.lucene}" {
  // needed to allow MMapDirectory's "unmap hack" (die unmap hack, die)
  permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";
  permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.ref";
  permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
  // NOTE: also needed for RAMUsageEstimator size calculations
  permission java.lang.RuntimePermission "accessDeclaredMembers";
  // needed to allow shard shrinking to use hard-links if possible via lucenes HardlinkCopyDirectoryWrapper
  permission java.nio.file.LinkPermission "hard";

  // org.apache.lucene.util.NamedSPILoader.reload(NamedSPILoader.java:71)
  permission java.lang.RuntimePermission "getClassLoader";

  // java.util.logging.LogManager.<clinit> ("org.apache.logging.log4j.jul.LogManager")
  // org.xbib.elasticsearch.lucene/org.apache.lucene.util.IOUtils.<clinit>(IOUtils.java:56)
  permission java.lang.RuntimePermission "shutdownHooks";
  permission java.lang.RuntimePermission "setContextClassLoader";

  // org.xbib.elasticsearch.lucene/org.apache.lucene.analysis.StopwordAnalyzerBase.<clinit>(StopwordAnalyzerBase.java:36)
  permission java.util.PropertyPermission "*", "read,write";
};

//// Everything else:

grant {

  // checked by scripting engines, and before hacks and other issues in
  // third party code, to safeguard these against unprivileged code like scripts.
  permission org.elasticsearch.SpecialPermission;

  // Allow host/ip name service lookups
  permission java.net.SocketPermission "*", "resolve";

  permission java.net.NetPermission "getNetworkInformation";

  // Allow read access to all system properties
  permission java.util.PropertyPermission "*", "read";

  // TODO: clean all these property writes up, and don't allow any more in. these are all bogus!

  // LuceneTestCase randomization (locale/timezone/cpus/ssd)
  // TODO: put these in doPrivileged and move these to test-framework.policy
  permission java.util.PropertyPermission "user.language", "write";
  permission java.util.PropertyPermission "user.timezone", "write";
  permission java.util.PropertyPermission "lucene.cms.override_core_count", "write";
  permission java.util.PropertyPermission "lucene.cms.override_spins", "write";
  // messiness in LuceneTestCase: do the above, or clean this up, or simply allow to fail if its denied
  permission java.util.PropertyPermission "solr.solr.home", "write";
  permission java.util.PropertyPermission "solr.data.dir", "write";
  permission java.util.PropertyPermission "solr.directoryFactory", "write";

  // set by ESTestCase to improve test reproducibility
  // TODO: set this with gradle or some other way that repros with seed?
  permission java.util.PropertyPermission "processors.override", "write";

  // TODO: these simply trigger a noisy warning if its unable to clear the properties
  // fix that in randomizedtesting
  permission java.util.PropertyPermission "junit4.childvm.count", "write";
  permission java.util.PropertyPermission "junit4.childvm.id", "write";

  // needed by Settings
  permission java.lang.RuntimePermission "getenv.*";

  // thread permission for the same thread group and ancestor groups
  // (this logic is more strict than the JDK, see SecureSM)
  permission java.lang.RuntimePermission "modifyThread";
  permission java.lang.RuntimePermission "modifyThreadGroup";

  // needed by ExceptionSerializationTests and RestTestCase for
  // some hackish things they do. otherwise only needed by groovy
  // (TODO: clean this up?)
  permission java.lang.RuntimePermission "getProtectionDomain";

  // needed by HotThreads and potentially more
  // otherwise can be provided only to test libraries
  permission java.lang.RuntimePermission "getStackTrace";

  // needed by JMX instead of getFileSystemAttributes, seems like a bug...
  permission java.lang.RuntimePermission "getFileStoreAttributes";

  // needed for jimfs and NewPathForShardsTests
  // otherwise can be provided only to test libraries
  permission java.lang.RuntimePermission "fileSystemProvider";

  // needed by jvminfo for monitoring the jvm
  permission java.lang.management.ManagementPermission "monitor";

  // needed by JDKESLoggerTests
  permission java.util.logging.LoggingPermission "control";

  // load averages on Linux
  permission java.io.FilePermission "/proc/loadavg", "read";

  // read max virtual memory areas
  permission java.io.FilePermission "/proc/sys/vm/max_map_count", "read";

  // OS release on Linux
  permission java.io.FilePermission "/etc/os-release", "read";
  permission java.io.FilePermission "/usr/lib/os-release", "read";
  permission java.io.FilePermission "/etc/system-release", "read";

  // io stats on Linux
  permission java.io.FilePermission "/proc/self/mountinfo", "read";
  permission java.io.FilePermission "/proc/diskstats", "read";

  // control group stats on Linux
  permission java.io.FilePermission "/proc/self/cgroup", "read";
  permission java.io.FilePermission "/sys/fs/cgroup/cpu", "read";
  permission java.io.FilePermission "/sys/fs/cgroup/cpu/-", "read";
  permission java.io.FilePermission "/sys/fs/cgroup/cpuacct", "read";
  permission java.io.FilePermission "/sys/fs/cgroup/cpuacct/-", "read";
  permission java.io.FilePermission "/sys/fs/cgroup/memory", "read";
  permission java.io.FilePermission "/sys/fs/cgroup/memory/-", "read";

  // we need libnio read permission for filesystem traversal (but why?)
  // linux
  permission java.io.FilePermission "/usr/lib/jvm/zulu-11/lib/libnio.so", "read";
  permission java.io.FilePermission "/usr/lib/jvm/zulu-12/lib/libnio.so", "read";
  permission java.io.FilePermission "/usr/lib/jvm/zulu-13/lib/libnio.so", "read";
  permission java.io.FilePermission "/usr/lib/jvm/zulu-14/lib/libnio.so", "read";
  // mac
  permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/lib/libnio.dylib", "read";
  permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/lib/libnio.dylib", "read";
  permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/lib/libnio.dylib", "read";
  permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home/lib/libnio.dylib", "read";

};
