#!/bin/bash

parse_jvm_options() {
  if [ -f "\$1" ]; then
    echo "\$(grep "^-" "\$1" | tr '\\n' ' ')"
  fi
}
containsElement () {
  local e match="\$1"
  shift
  for e; do [[ "\$e" == "\$match" ]] && return 0; done
  return 1
}

# This is the start script for Elasticsearch on Linux

app="elasticsearch"
profile="${profile}"

dir="\$(cd -P "\$(dirname "\$0")" && pwd)"

ES_HOME="\${dir}/.."
ES_PATH_CONF="\${ES_HOME}/config"

for jvm_options in \${dir}/../config/\${app}-\${profile}-jvm.options ; do
    if [ -r "\$jvm_options" ]; then
        JVM_OPTIONS=\$jvm_options
        break
    fi
done
ES_JAVA_OPTS="\$(parse_jvm_options "\$JVM_OPTIONS") \$ES_JAVA_OPTS"
ES_JAVA_OPTS=\$(eval "echo \$ES_JAVA_OPTS")

classpath="\${dir}/../lib/*"

if [ -x "\$JAVA_HOME/bin/java" ]; then
    JAVA="\$JAVA_HOME/bin/java"
else
    JAVA=`which java`
fi
if [ ! -x "\$JAVA" ]; then
    echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
    exit 1
fi

JAVA_VERSION=\$(\${JAVA} -version 2>&1 | sed -E -n 's/.* version "(.*)"/\\1/p' | cut -d' ' -f1)

versions=("1.8.0_172" "9" "10" "11")
containsElement "\${JAVA_VERSION}" "\${versions[@]}"

if [ \$? == 1 ]; then
    echo "Java version is \${JAVA_VERSION}, unable to execute. Please install one of this Java versions \${versions} in your PATH or set JAVA_HOME"
    exit 1
fi

exec \${JAVA} \
 \${ES_JAVA_OPTS} \
 -Des.path.home="\${ES_HOME}" \
 -Des.path.conf="\${ES_PATH_CONF}" \
 -Des.distribution.flavor="oss" \
 -Des.distribution.type="tar" \
 -classpath "\${classpath}" \
 org.elasticsearch.bootstrap.Elasticsearch \
 "\${@}"

retval=\$?
exit \${retval}
