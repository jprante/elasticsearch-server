buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://xbib.org/repository'
        }
    }
    dependencies {
        classpath "org.xbib.gradle.plugin:gradle-plugin-docker:1.0.1"
        classpath "org.xbib.gradle.plugin:gradle-plugin-git:1.0.0"
    }
}

import java.time.ZoneOffset
import java.time.ZonedDateTime

apply plugin: 'org.xbib.gradle.plugin.elasticsearch.build'
apply plugin: 'org.xbib.gradle.plugin.rpm'
apply plugin: 'org.xbib.gradle.plugin.docker'
apply plugin: 'org.xbib.gradle.plugin.git'
apply plugin: 'signing'

ext {
    subst = [
            'timestamp': new Date().format('yyyyMMddHHmmss'),
            'profile': "${project.profile}"
    ]
}

configurations {
    esLibDist
    esPatchDist
    esModuleDist
    esPluginDist
}

dependencies {

    compile  "org.xbib.elasticsearch:hdrhistogram:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:hppc:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:jna:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:joda:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:joptsimple:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:log4j:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:lucene:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:securesm:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:snakeyaml:${property('elasticsearch-libs.version')}"
    compile  "org.xbib.elasticsearch:tdigest:${property('elasticsearch-libs.version')}"
    
    testCompile "org.xbib.elasticsearch:elasticsearch-test-framework:${property('elasticsearch-devkit.version')}"
    testCompile "org.xbib.elasticsearch:guava:${property('elasticsearch-libs.version')}"
    testCompile("com.google.jimfs:jimfs:${property('jimfs.version')}") {
        exclude module: 'guava'
    }

    esLibDist  "org.xbib.elasticsearch:hdrhistogram:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:hppc:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:jna:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:joda:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:joptsimple:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:log4j:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:lucene:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:securesm:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:snakeyaml:${property('elasticsearch-libs.version')}"
    esLibDist  "org.xbib.elasticsearch:tdigest:${property('elasticsearch-libs.version')}"

    esPatchDist("org.xbib.elasticsearch:litebeans:${property('elasticsearch-libs.version')}:patch") {
        transitive = false
    }

    rootProject.esmodules.each { module ->
        if (rootProject.file(module).exists()) {
            add('esModuleDist', project(path: ":${module}", configuration: 'esdist'))
        }
    }
    rootProject.esplugins.each { plugin ->
        if (rootProject.file(plugin).exists()) {
            add('esPluginDist', project(path: ":${plugin}", configuration: 'esdist'))
        }
    }
    // our modules
    esModuleDist project(path: ":transport-netty4", configuration: "esdist")
    esModuleDist project(path: ":elasticsearch-analysis-common", configuration: "esdist")
    // if module is external
    //esModuleDist group: "org.xbib.elasticsearch", name: "elasticsearch-analysis-common",
    //        version: "${property('elasticsearch-analysis-common.version')}", ext:"zip"
    
    // our plugins
    if (profile == 'extended') {
        esPluginDist group: "org.xbib.elasticsearch.plugin", name: "elasticsearch-plugin-bundle",
                version: "${property('elasticsearch-plugin-bundle.version')}", ext: "zip"
    }
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.server')
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    compileTestJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.server.test')
        doFirst {
            options.compilerArgs = [
                    "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked",
                    "-proc:none",
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    javadoc {
        enabled = true
        inputs.property("moduleName", 'org.xbib.elasticsearch.server')
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
    jar {
        inputs.property("moduleName", 'org.xbib.elasticsearch.server')
        manifest {
            attributes(
                    'Implementation-Title': "${project.group}#${project.name};${project.version}",
                    'Implementation-Version': version,
                    'Implementation-Vendor': "${user}",
                    'Change': git.head().abbreviatedId,
                    'Branch': git.head().id,
                    'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),
                    'Build-Java-Version': System.getProperty("java.version"),
                    'X-Compile-Source-JDK': compileJava.targetCompatibility,
                    'X-Compile-Target-JDK': compileJava.sourceCompatibility,
                    'X-Compile-Elasticsearch-Version': version,
                    'X-Compile-Lucene-Version': project.property('lucene.version'),
                    'X-Compile-Elasticsearch-Snapshot': false,
                    'Main-Class': 'org.elasticsearch.bootstrap.Elasticsearch'
            )
        }
    }
}

task injectGradleProperties(type: Copy) {
    from rootProject.file('gradle.properties')
    into 'build/resources/main'
    expand(subst)
}
processResources.finalizedBy injectGradleProperties

checkstyleTest.enabled = false

// junit tests
test {
    enabled = false
    dependsOn jar, testJar
    classpath = project.files(project.configurations.testRuntime) +
            project.configurations.mains.artifacts.files +
            project.configurations.tests.artifacts.files
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-reads', "org.xbib.elasticsearch.server=junit",
            //'--patch-module', "org.xbib.elasticsearch.server=" + files(sourceSets.test.java.outputDir).asPath,
    ]

    exclude '**/*$*.class'
    include '**/Tests*.class'
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

// randomized tests (same as ES but no plugin task)
randomizedTest {
    enabled = false
    dependsOn jar, testJar
    modulepath = project.files(project.configurations.testRuntime) +
            project.configurations.mains.artifacts.files +
            project.configurations.tests.artifacts.files
    exclude '**/*$*.class'
    include '**/*Tests.class'

    systemProperty 'tests.security.manager', 'true'
    systemProperty 'tests.security.policy', '/org/elasticsearch/test/extra-security.policy'
    //systemProperty 'java.security.debug', 'all'

    //systemProperty 'tests.class', 'org.elasticsearch.test.action.bulk.TransportBulkActionIngestTests'
    //systemProperty 'tests.class', 'org.elasticsearch.test.SpecialPermissionTests'

    jvmArg "--add-modules=ALL-MODULE-PATH"
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.server'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.server.test'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.testframework'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.lucene'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.log4j'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.joda'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.hppc'
    jvmArg '--add-reads=org.xbib.elasticsearch.randomizedtesting=org.xbib.elasticsearch.server'
    jvmArg '--add-reads=org.xbib.elasticsearch.randomizedtesting=org.xbib.elasticsearch.server.test'
    jvmArg '--add-reads=org.xbib.elasticsearch.server.test=org.xbib.elasticsearch.randomizedtesting'
    jvmArg '--add-reads=org.xbib.elasticsearch.server=org.xbib.elasticsearch.server.test'
    jvmArg '--add-opens=java.base/java.lang=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=java.base/java.lang.reflect=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=java.base/java.io=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=java.base/java.nio=org.xbib.elasticsearch.lucene'
    jvmArg '--add-exports=jdk.unsupported/sun.misc=org.xbib.elasticsearch.lucene'
    jvmArg '--add-exports=java.base/sun.nio.ch=org.xbib.elasticsearch.lucene'

    testLogging {
        showNumFailuresAtEnd 25
        outputMode 'always'
    }
}

// run Elasticsearch test suite

/*
Tests with failures:
  - org.elasticsearch.test.ExceptionSerializationTests.testExceptionRegistration
  - org.elasticsearch.test.cluster.service.ClusterApplierServiceTests.testLongClusterStateUpdateLogging
  - org.elasticsearch.test.cluster.service.ClusterApplierServiceTests.testClusterStateUpdateLogging
  - org.elasticsearch.test.action.bulk.TransportShardBulkActionTests.testMappingUpdateParsesCorrectNumberOfTimes
  - org.elasticsearch.test.action.bulk.TransportShardBulkActionTests.testNoOpReplicationOnPrimaryDocumentFailure
  - org.elasticsearch.test.index.translog.TranslogDeletionPolicyTests.testRetentionHierarchy
  - org.elasticsearch.test.index.translog.TranslogDeletionPolicyTests.testBytesRetention
  - org.elasticsearch.test.index.translog.TranslogDeletionPolicyTests.testNoRetention
  - org.elasticsearch.test.index.translog.TranslogDeletionPolicyTests.testAgeRetention
  - org.elasticsearch.test.cluster.routing.allocation.FailedNodeRoutingTests.testRandomClusterPromotesNewestReplica
  - org.elasticsearch.test.cluster.routing.allocation.FailedNodeRoutingTests (suite)
  - org.elasticsearch.test.rest.action.RestActionsTests.testParseTopLevelBuilderIncompleteJson
  - org.elasticsearch.test.indices.cluster.IndicesClusterStateServiceRandomUpdatesTests.testRandomClusterStateUpdates
  - org.elasticsearch.test.cluster.service.MasterServiceTests.testClusterStateUpdateLogging
*/
esTest {
    enabled = false
    systemProperty 'tests.security.manager', 'true'
    systemProperty 'tests.security.policy', '/org/elasticsearch/test/extra-security.policy'
    //systemProperty 'java.security.debug', 'permissions,all'
    systemProperty 'tests.logger.level', 'INFO'
    
    //systemProperty 'tests.class', 'org.elasticsearch.test.index.translog.TranslogDeletionPolicyTests'

    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.server'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.server.test'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.testframework'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.lucene'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.log4j'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.joda'
    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.hppc'
    jvmArg '--add-reads=org.xbib.elasticsearch.randomizedtesting=org.xbib.elasticsearch.server'
    jvmArg '--add-reads=org.xbib.elasticsearch.randomizedtesting=org.xbib.elasticsearch.server.test'
    jvmArg '--add-reads=org.xbib.elasticsearch.server.test=org.xbib.elasticsearch.randomizedtesting'
    jvmArg '--add-reads=org.xbib.elasticsearch.server=org.xbib.elasticsearch.server.test'
    jvmArg '--add-opens=java.base/java.lang=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=java.base/java.lang.reflect=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=java.base/java.io=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=java.base/java.nio=org.xbib.elasticsearch.lucene'
    jvmArg '--add-exports=jdk.unsupported/sun.misc=org.xbib.elasticsearch.lucene'
    jvmArg '--add-exports=java.base/sun.nio.ch=org.xbib.elasticsearch.lucene'
    jvmArg '--add-exports=java.base/jdk.internal.ref=org.xbib.elasticsearch.lucene'
    jvmArg '--add-opens=org.xbib.elasticsearch.testframework/org.elasticsearch.testframework=org.xbib.elasticsearch.securemock'
    jvmArg '--add-opens=org.xbib.elasticsearch.lucene.testframework/org.apache.lucene.testframework.util=org.xbib.elasticsearch.securemock'

    testLogging {
        showNumFailuresAtEnd 25
        outputMode 'always'
    }
}

task generateModulesList {
    File modulesFile = new File(buildDir, 'generated-resources/modules.txt')
    processResources.from(modulesFile)
    inputs.property('modules', rootProject.esmodules)
    outputs.file(modulesFile)
    doLast {
        modulesFile.parentFile.mkdirs()
        modulesFile.setText(rootProject.esmodules.join('\n'), 'UTF-8')
    }
}

task generatePluginsList {
    File pluginsFile = new File(buildDir, 'generated-resources/plugins.txt')
    processResources.from(pluginsFile)
    inputs.property('plugins', rootProject.esplugins)
    outputs.file(pluginsFile)
    doLast {
        pluginsFile.parentFile.mkdirs()
        pluginsFile.setText(rootProject.esplugins.join('\n'), 'UTF-8')
    }
}

processResources {
    dependsOn generateModulesList, generatePluginsList
    rootProject.esmodules.each { module ->
        if (rootProject.file(module).exists()) {
            dependsOn ":${module}:bundlePlugin"
        }
    }
}

clean {
    delete fileTree('.') { include '.local*.log' }
}

forbiddenPatterns {
    exclude '**/*.json'
    exclude '**/*.jmx'
}

dependencyLicenses.enabled = false

jarHell.enabled = false

loggerUsageCheck.enabled = true

archivesBaseName = 'elasticsearch'

def rhelDistCopySpec = copySpec {
    into("elasticsearch-${version}") {
        into('bin') {
            from "build/tmp/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin"
            fileMode 0550
        }
        into('conf') {
            from "build/tmp/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/conf"
        }
        into('lib') {
            from configurations.esLibDist
        }
        into('lib') {
            from file("${project.buildDir}/distributions") // distsDir
            include "elasticsearch-${version}.jar"
            rename { String filename -> "elasticsearch-${project.property('elasticsearch.version')}.jar" }
        }
        into('lib/patch') {
            from project.configurations.esPatchDist
            rename { String filename -> 'java.beans'}
        }
        into("logs") {
            from project.file("src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/log/.empty")
        }
        project.configurations.esModuleDist.each { artifact ->
            into("elasticsearch-${version}/modules/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip', '')}") {
                from zipTree(artifact)
            }
        }
        project.configurations.esPluginDist.each { artifact ->
            into("elasticsearch-${version}/plugins/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip','')}") {
                from zipTree(artifact)
            }
        }
    }
}

task rhel7Copy(type: Copy) {
    dependsOn jar
    group = 'linux'
    destinationDir project.file("build")
    into("tmp/dist/rhel7-x86_64") {
        into("tar/java-${compileJava.targetCompatibility}/${project.profile}/bin") {
            from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin"
            expand(subst)
        }
        into("tar/java-${compileJava.targetCompatibility}/${project.profile}/conf") {
            from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/conf"
        }
        into("zip/java-${compileJava.targetCompatibility}/${project.profile}/bin") {
            from "src/dist/rhel7-x86_64/zip/java-${compileJava.targetCompatibility}/${project.profile}/bin"
            expand(subst)
        }
        into("zip/java-${compileJava.targetCompatibility}/${project.profile}/conf") {
            from "src/dist/rhel7-x86_64/zip/java-${compileJava.targetCompatibility}/${project.profile}/conf"
        }
        into("rpm/java-${compileJava.targetCompatibility}/${project.profile}/bin") {
            from "src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/bin"
            expand(subst)
        }
        into("rpm/java-${compileJava.targetCompatibility}/${project.profile}/conf") {
            from "src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/conf"
        }
    }
}

task rhel7DistTar(type: Tar) {
    dependsOn 'rhel7Copy'
    group = 'linux'
    baseName 'elasticsearch-server'
    version project.version
    appendix "${project.profile}.java-${compileJava.targetCompatibility}"
    compression Compression.GZIP
    extension 'tgz'
    with rhelDistCopySpec
}

task rhel7DistZip(type: Zip) {
    dependsOn 'rhel7Copy'
    group = 'linux'
    baseName 'elasticsearch-server'
    version project.version
    appendix "${project.profile}.java-${compileJava.targetCompatibility}"
    with rhelDistCopySpec
}

task rhel7DistRpm(type: Rpm) {
    dependsOn 'rhel7Copy'
    group = 'linux'
    packageName 'elasticsearch-server'
    version project.version
    release "${project.release}.${project.profile}"
    arch X86_64
    os LINUX
    license 'Apache License 2.0'
    packager 'Jörg Prante < joergprante@gmail.com>'
    vendor 'xbib'
    description description
    url 'https://github.com/jprante/elasticsearch-server'
    user 'es'
    preInstall "src/dist/rhel7-x86_64/rpm/preInstall.sh"
    postInstall "src/dist/rhel7-x86_64/rpm/postInstall.sh"
    preUninstall "src/dist/rhel7-x86_64/rpm/preUninstall.sh"
    postUninstall "src/dist/rhel7-x86_64/rpm/postUninstall.sh"
    into('/opt') {
        addParentDirs = false
        into("elasticsearch-${version}") {
            into('bin') {
                addParentDirs = false
                fileMode 0550
                from "build/tmp/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/bin"
            }
            into('conf') {
                from("build/tmp/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/conf")
            }
            into('lib') {
                from configurations.esLibDist
            }
            into('lib') {
                from file("${project.buildDir}/distributions") // distsDir
                include "elasticsearch-${version}.jar"
                rename { String filename -> "elasticsearch-${project.property('elasticsearch.version')}.jar" }
            }
            into('lib/patch') {
                from project.configurations.esPatchDist
                rename { String filename -> 'java.beans'}
            }
            into('logs') {
                from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/log/.empty")
            }
        }
    }
    project.configurations.esModuleDist.each { artifact ->
        into("/opt/elasticsearch-${version}/modules/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip', '')}") {
            from zipTree(artifact)
        }
    }
    project.configurations.esPluginDist.each { artifact ->
        into("/opt/elasticsearch-${version}/plugins/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip','')}") {
            from zipTree(artifact)
        }
    }
    into('/etc/systemd/system') {
        addParentDirs = false
        from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/etc/systemd/system/elasticsearch.service")
        rename { String filename -> "elasticsearch.service" }
    }
    into('/etc/sysconfig') {
        addParentDirs = false
        from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/etc/sysconfig/elasticsearch")
        rename { String filename -> "elasticsearch-${project.profile}" }
    }
    into('/etc/security/limits.d') {
        addParentDirs = false
        from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/etc/security/limits.d")
        rename { String filename -> "elasticsearch-${project.profile}" }
    }
    link('/opt/elasticsearch', "/opt/elasticsearch-${version}")
    if (project.hasProperty('signing.keyId')) {
        signingKeyId = project.property('signing.keyId')
        signingKeyPassphrase = project.property('signing.password')
        signingKeyRing = project.property('signing.secretKeyRingFile')
    }
    doLast {
        File gradleProperties = file("${rootProject.projectDir}/gradle.properties")
        if (gradleProperties.exists()) {
            String content = gradleProperties.text
            Integer nextRelease = Integer.parseInt(project.release) + 1
            println "release: ${project.release} next release: ${nextRelease}"
            gradleProperties.write(content.replace("\nrelease = ${project.release}\n", "\nrelease = ${nextRelease}\n"))
        }
    }
}

configurations {
    archives
}

artifacts {
    archives jar, testJar, javadocJar, sourcesJar, rhel7DistTar, rhel7DistZip, rhel7DistRpm
}

signing {
    sign jar, testJar, javadocJar, sourcesJar, rhel7DistTar, rhel7DistZip, rhel7DistRpm
}

apply from: "${rootProject.projectDir}/gradle/publish.gradle"

docker {
    dependsOn rhel7DistTar
    name "fl.hbz-nrw.de/jprante/elasticsearch-server-${project.profile}:${project.version}"
    dockerfile file('Dockerfile.alpine-glibc-openjdk11')
    buildArgs(['version': "${project.version}"])
    files tasks.rhel7DistTar.outputs
}

task dockerBuildExtended(type: GradleBuild) {
    group = 'docker'
    tasks = ['docker']
    startParameter.projectProperties = ['profile': 'extended']
}

/*
dockerRun {
    name 'elasticsearch'
    user 'elasticsearch'
    ports '9200:9200', '9300:9300'
    image "fl.hbz-nrw.de/jprante/elasticsearch-server-${project.profile}:${project.version}"
    command 'java',
            '-XX:UseAVX=2',
            '-Dfile.encoding=UTF-8',
            '-Djava.awt.headless=true',
            '-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager',
            '-Dlog4j2.debug=false',
            '-Dlog4j2.disable.jmx=true',
            '-Dlog4j.shutdownHookEnabled=false',
            '-Dio.netty.allocator.type=pooled',
            '-Dio.netty.noUnsafe=true',
            '-Dio.netty.recycler.maxCapacity=0',
            '-Dio.netty.noKeySetOptimization=true',
            '-Djna.nosys=true',
            '-Des.path.home=/elasticsearch',
            '-Des.path.conf=/elasticsearch/conf',
            '-Des.distribution.flavor=oss',
            '-Des.distribution.type=tar',
            '--patch-module', 'java.base=/elasticsearch/lib/patch/java.beans',
            '--add-exports', 'java.base/java.beans=org.xbib.elasticsearch.log4j',
            '--module-path', '/elasticsearch/lib',
            '--module','org.xbib.elasticsearch.server/org.elasticsearch.bootstrap.Elasticsearch',
            '-Ebootstrap.memory_lock=false',
            '-Enetwork.host=0.0.0.0'
}
*/
