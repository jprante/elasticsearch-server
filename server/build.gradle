import org.xbib.gradle.plugin.elasticsearch.VersionProperties

import java.time.ZoneOffset
import java.time.ZonedDateTime

apply plugin: 'org.xbib.gradle.plugin.elasticsearch.build'
apply plugin: 'org.xbib.gradle.plugin.rpm'

configurations {
    esModuleDists
    esPluginDists
}

dependencies {
    compile "org.elasticsearch:elasticsearch-core:${property('elasticsearch.version')}"
    compile "org.elasticsearch:elasticsearch-secure-sm:${property('elasticsearch.version')}"
    compile "org.elasticsearch:elasticsearch-x-content:${property('elasticsearch.version')}"
    compile "org.elasticsearch:elasticsearch-cli:${property('elasticsearch.version')}"

    compile "org.apache.lucene:lucene-core:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-analyzers-common:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-backward-codecs:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-grouping:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-highlighter:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-join:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-memory:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-misc:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-queries:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-queryparser:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-sandbox:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-spatial:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-spatial-extras:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-spatial3d:${property('lucene.version')}"
    compile "org.apache.lucene:lucene-suggest:${property('lucene.version')}"

    compile "com.carrotsearch:hppc:${property('hppc.version')}"
    compile "joda-time:joda-time:${property('joda-time.version')}"
    compile "com.tdunning:t-digest:${property('t-digest.version')}"
    compile "org.hdrhistogram:HdrHistogram:${property('hdr.version')}"
    compile "org.locationtech.spatial4j:spatial4j:${property('spatial4j.version')}"
    compile "org.locationtech.jts:jts-core:${property('jts.version')}"
    compile "org.elasticsearch:jna:${property('jna.version')}"
    compile "org.apache.logging.log4j:log4j-api:${property('log4j.version')}"
    compile "org.apache.logging.log4j:log4j-core:${property('log4j.version')}"
    compile "org.apache.logging.log4j:log4j-1.2-api:${property('log4j.version')}"
    compile project(':plugin-classloader')

    testCompile "org.xbib.elasticsearch:elasticsearch-test-framework:${property('xbib-elasticsearch-test.version')}"
    testCompile "com.google.jimfs:jimfs:${property('jimfs.version')}"
    testCompile "com.google.guava:guava:${property('guava.version')}"

    rootProject.esmodules.each { module ->
        if (new File(module).exists()) {
            add('esModuleDists', project(path: ":${module}", configuration: 'esdist'))
        }
    }

    esModuleDists group: "org.xbib.elasticsearch", name: "elasticsearch-analysis-common", version: "6.3.2.1", ext:"zip"

    esPluginDists group: "org.xbib.elasticsearch.plugin", name: "elasticsearch-plugin-bundle", version: "6.3.2.1", ext:"zip"

}

compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked"
compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked"

artifacts {
    archives sourcesJar, javadocJar
}

// do not run junit tests
test.enabled = false
// do not run randomized tests
randomizedTest.enabled = false
// run Elasticsearch test suite
esTest.enabled = false

task generateModulesList {
    File modulesFile = new File(buildDir, 'generated-resources/modules.txt')
    processResources.from(modulesFile)
    inputs.property('modules', rootProject.esmodules)
    outputs.file(modulesFile)
    doLast {
        modulesFile.parentFile.mkdirs()
        modulesFile.setText(rootProject.esmodules.join('\n'), 'UTF-8')
    }
}

task generatePluginsList {
    File pluginsFile = new File(buildDir, 'generated-resources/plugins.txt')
    processResources.from(pluginsFile)
    inputs.property('plugins', rootProject.esplugins)
    outputs.file(pluginsFile)
    doLast {
        pluginsFile.parentFile.mkdirs()
        pluginsFile.setText(rootProject.esplugins.join('\n'), 'UTF-8')
    }
}

processResources {
    rootProject.esmodules.each { module ->
        if (new File(module).exists()) {
            dependsOn ":${module}:bundlePlugin"
        }
    }
    dependsOn generateModulesList, generatePluginsList
}

forbiddenPatterns {
    exclude '**/*.json'
    exclude '**/*.jmx'
}

thirdPartyAudit.excludes = [
        // classes are missing!

        // from com.fasterxml.jackson.dataformat.yaml.YAMLMapper (jackson-dataformat-yaml)
        'com.fasterxml.jackson.databind.ObjectMapper',

        // from log4j
        'com.conversantmedia.util.concurrent.DisruptorBlockingQueue',
        'com.conversantmedia.util.concurrent.SpinPolicy',
        'com.fasterxml.jackson.annotation.JsonInclude$Include',
        'com.fasterxml.jackson.databind.DeserializationContext',
        'com.fasterxml.jackson.databind.DeserializationFeature',
        'com.fasterxml.jackson.databind.JsonMappingException',
        'com.fasterxml.jackson.databind.JsonNode',
        'com.fasterxml.jackson.databind.Module$SetupContext',
        'com.fasterxml.jackson.databind.ObjectReader',
        'com.fasterxml.jackson.databind.ObjectWriter',
        'com.fasterxml.jackson.databind.SerializerProvider',
        'com.fasterxml.jackson.databind.deser.std.StdDeserializer',
        'com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer',
        'com.fasterxml.jackson.databind.module.SimpleModule',
        'com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter',
        'com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider',
        'com.fasterxml.jackson.databind.ser.std.StdScalarSerializer',
        'com.fasterxml.jackson.databind.ser.std.StdSerializer',
        'com.fasterxml.jackson.dataformat.xml.JacksonXmlModule',
        'com.fasterxml.jackson.dataformat.xml.XmlMapper',
        'com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter',
        'com.fasterxml.jackson.databind.node.ObjectNode',
        'org.fusesource.jansi.Ansi',
        'org.fusesource.jansi.AnsiRenderer$Code',
        'com.lmax.disruptor.BlockingWaitStrategy',
        'com.lmax.disruptor.BusySpinWaitStrategy',
        'com.lmax.disruptor.EventFactory',
        'com.lmax.disruptor.EventTranslator',
        'com.lmax.disruptor.EventTranslatorTwoArg',
        'com.lmax.disruptor.EventTranslatorVararg',
        'com.lmax.disruptor.ExceptionHandler',
        'com.lmax.disruptor.LifecycleAware',
        'com.lmax.disruptor.RingBuffer',
        'com.lmax.disruptor.Sequence',
        'com.lmax.disruptor.SequenceReportingEventHandler',
        'com.lmax.disruptor.SleepingWaitStrategy',
        'com.lmax.disruptor.TimeoutBlockingWaitStrategy',
        'com.lmax.disruptor.WaitStrategy',
        'com.lmax.disruptor.YieldingWaitStrategy',
        'com.lmax.disruptor.dsl.Disruptor',
        'com.lmax.disruptor.dsl.ProducerType',
        'javax.jms.Connection',
        'javax.jms.ConnectionFactory',
        'javax.jms.Destination',
        'javax.jms.JMSException',
        'javax.jms.MapMessage',
        'javax.jms.Message',
        'javax.jms.MessageConsumer',
        'javax.jms.MessageProducer',
        'javax.jms.Session',
        'javax.mail.Authenticator',
        'javax.mail.Message$RecipientType',
        'javax.mail.PasswordAuthentication',
        'javax.mail.Session',
        'javax.mail.Transport',
        'javax.mail.internet.InternetAddress',
        'javax.mail.internet.InternetHeaders',
        'javax.mail.internet.MimeBodyPart',
        'javax.mail.internet.MimeMessage',
        'javax.mail.internet.MimeMultipart',
        'javax.mail.internet.MimeUtility',
        'javax.mail.util.ByteArrayDataSource',
        'org.apache.commons.compress.compressors.CompressorStreamFactory',
        'org.apache.commons.compress.utils.IOUtils',
        'org.apache.commons.csv.CSVFormat',
        'org.apache.commons.csv.QuoteMode',
        'org.apache.kafka.clients.producer.Callback',
        'org.apache.kafka.clients.producer.KafkaProducer',
        'org.apache.kafka.clients.producer.Producer',
        'org.apache.kafka.clients.producer.ProducerRecord',
        'org.apache.kafka.clients.producer.RecordMetadata',
        'org.codehaus.stax2.XMLStreamWriter2',
        'org.jctools.queues.MessagePassingQueue$Consumer',
        'org.jctools.queues.MpscArrayQueue',
        'org.osgi.framework.AdaptPermission',
        'org.osgi.framework.AdminPermission',
        'org.osgi.framework.Bundle',
        'org.osgi.framework.BundleActivator',
        'org.osgi.framework.BundleContext',
        'org.osgi.framework.BundleEvent',
        'org.osgi.framework.BundleReference',
        'org.osgi.framework.FrameworkUtil',
        'org.osgi.framework.ServiceRegistration',
        'org.osgi.framework.SynchronousBundleListener',
        'org.osgi.framework.wiring.BundleWire',
        'org.osgi.framework.wiring.BundleWiring',
        'org.zeromq.ZMQ$Context',
        'org.zeromq.ZMQ$Socket',
        'org.zeromq.ZMQ',
        // log4j-api 2.11.0  Java 9
        'java.io.ObjectInputFilter$Config',
        'java.io.ObjectInputFilter$FilterInfo',
        'java.io.ObjectInputFilter$Status',
        'java.io.ObjectInputFilter',

        // from org.locationtech.spatial4j.io.GeoJSONReader (spatial4j)
        'org.noggit.JSONParser',

        // from lucene-spatial
        'com.fasterxml.jackson.databind.JsonSerializer',
        'com.fasterxml.jackson.databind.JsonDeserializer',
        'com.fasterxml.jackson.databind.node.ArrayNode',
]

dependencyLicenses {
    mapping from: /lucene-.*/, to: 'lucene'
    dependencies = project.configurations.runtime.fileCollection {
        !it.group.startsWith('org.elasticsearch') || it.name == 'jna' || it.name == 'securesm'
    }
}

jarHell.enabled = false

archivesBaseName = 'elasticsearch'

jar {
    manifest {
        attributes(
                'Implementation-Version': version,
                'Change': '',
                'Branch': '',
                'X-Compile-Elasticsearch-Version': version,
                'X-Compile-Lucene-Version': project.property('lucene.version'),
                'X-Compile-Elasticsearch-Snapshot': false,
                'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),
                'Build-Java-Version': project.compilerJavaVersion
        )
    }
}

def rhelDistCopySpec = copySpec {
    into("elasticsearch-${version}") {
        into('bin') {
            from "build/tmp/dist/rhel7-linux-x86_64/bin/elasticsearch.${project.profile}-tar-java${targetCompatibility.getMajorVersion()}"
            rename { String filename -> "elasticsearch" }
            fileMode 0550
        }
        into('lib') {
            from configurations.runtime
        }
        into('lib') {
            from 'build/distributions'
            include "elasticsearch-${version}.jar"
            rename { String filename -> "elasticsearch-${project.property('elasticsearch.version')}.jar" }
            }
        into('config') {
            from "src/dist/rhel7-linux-x86_64/etc/options.${project.profile}-tar-java${targetCompatibility.getMajorVersion()}"
            rename { String filename -> "elasticsearch-${project.profile}-jvm.options" }
        }
        into('config') {
            from "src/dist/rhel7-linux-x86_64/etc/config.${project.profile}-tar-java${targetCompatibility.getMajorVersion()}"
            rename { String filename -> "elasticsearch-${project.profile}-config.yml" }
        }
        into('config') {
            from "src/dist/rhel7-linux-x86_64/etc/log4j2.${project.profile}-tar-java${targetCompatibility.getMajorVersion()}"
            rename { String filename -> "elasticsearch-${project.profile}-log4j2.properties" }
        }
        into("logs") {
            from('src/dist/rhel7-linux-x86_64/log/.empty')
        }
        project.configurations.esModuleDists.each { artifact ->
            into("elasticsearch-${version}/modules/${artifact.name.replace('-' + version.toString() + '.zip','')}") {
                from zipTree(artifact)
            }
        }
        project.configurations.esPluginDists.each { artifact ->
            into("elasticsearch-${version}/plugins/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip','')}") {
                from zipTree(artifact)
            }
        }
    }
}

task rhelBinCopy(type: Copy) {
    group = 'linux'
    from 'src/dist/rhel7-linux-x86_64/bin'
    into 'build/tmp/dist/rhel7-linux-x86_64/bin'
    expand([
            'profile' : "${project.profile}"
    ])
}

task rhelDistTar(type: Tar, dependsOn: ['jar', 'rhelBinCopy']) {
    group = 'linux'
    compression Compression.GZIP
    extension 'tar.gz'
    with rhelDistCopySpec
}

task rhelDistRpm(type: Rpm, dependsOn: ['jar', 'rhelBinCopy']) {
    group = 'linux'
    packageName project.name
    version project.version
    release "${project.release}.${project.profile}.java${targetCompatibility.getMajorVersion()}"
    arch X86_64
    os LINUX
    license 'Apache License 2.0'
    packager 'Jörg Prante < joergprante@gmail.com>'
    vendor 'xbib'
    description description
    url 'https://github.com/jprante/elasticsearch-xbib'
    user 'elasticsearch'
    preInstall 'src/dist/rpm/preInstall.sh'
    postInstall 'src/dist/rpm/postInstall.sh'
    preUninstall 'src/dist/rpm/preUninstall.sh'
    postUninstall 'src/dist/rpm/postUninstall.sh'
    into('/usr/bin') {
        addParentDirs = false
        fileMode 0550
        from "build/tmp/dist/rhel7-linux-x86_64/bin/elasticsearch.${project.profile}-rpm-java${targetCompatibility.getMajorVersion()}"
        rename { String filename -> "elasticsearch" }
    }
    into('/usr/share') {
        addParentDirs = false
        into('elasticsearch-' + project.version) {
            into('lib') {
                from configurations.runtime
            }
            into('lib') {
                from libsDir
                include "elasticsearch-${version}.jar"
                rename { String filename -> "elasticsearch-${project.property('elasticsearch.version')}.jar" }
            }
            into('config') {
                from("src/dist/rhel7-linux-x86_64/etc/options.${project.profile}-rpm-java${targetCompatibility.getMajorVersion()}")
                rename { String filename -> "elasticsearch-${project.profile}-jvm.options" }
            }
            into('config') {
                from("src/dist/rhel7-linux-x86_64/etc/config.${project.profile}-rpm-java${targetCompatibility.getMajorVersion()}")
                rename { String filename -> "elasticsearch-${project.profile}-config.yml" }
            }
            into('config') {
                from "src/dist/rhel7-linux-x86_64/etc/log4j2.${project.profile}-rpm-java${targetCompatibility.getMajorVersion()}"
                rename { String filename -> "elasticsearch-${project.profile}-log4j2.properties" }
            }
            into('logs') {
                from('src/dist/rhel7-linux-x86_64/log/.empty')
            }
            project.configurations.esModuleDists.each { artifact ->
                into("elasticsearch-${version}/modules/${artifact.name.replace('-' + version.toString() + '.zip','')}") {
                    from zipTree(artifact)
                }
            }
            project.configurations.esPluginDists.each { artifact ->
                into("elasticsearch-${version}/plugins/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip','')}") {
                    from zipTree(artifact)
                }
            }
        }
    }
    from('src/dist/rhel7-linux-x86_64/systemd') {
        addParentDirs = false
        into '/etc/systemd/system'
    }
    link('/usr/share/elasticsearch', '/usr/share/elasticsearch' + '-' + project.version)
    if (project.hasProperty('signing.keyId')) {
        signingKeyId = project.property('signing.keyId')
        signingKeyPassphrase = project.property('signing.password')
        signingKeyRing = project.property('signing.secretKeyRingFile')
    }
    doLast {
        File gradleProperties = file("${rootProject.projectDir}/gradle.properties")
        if (gradleProperties.exists()) {
            String content = gradleProperties.text
            Integer nextRelease = Integer.parseInt(project.release) + 1
            println "release: ${project.release} next release: ${nextRelease}"
            gradleProperties.write(content.replace("\nrelease = ${project.release}\n", "\nrelease = ${nextRelease}\n"))
        }
    }
}
