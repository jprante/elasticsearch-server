plugins {
    id "com.palantir.docker" version "0.20.1"
}

import java.time.ZoneOffset
import java.time.ZonedDateTime

apply plugin: 'org.xbib.gradle.plugin.elasticsearch.build'
apply plugin: 'org.xbib.gradle.plugin.rpm'

ext {
    moduleName = 'org.xbib.elasticsearch.server'
}
configurations {
    esLibDist
    esModuleDist
    esPluginDist
}

dependencies {
    compile project(':elasticsearch-classloader')
    compile project(':elasticsearch-hdrhistogram')
    compile project(':elasticsearch-hppc')
    compile project(':elasticsearch-jna')
    compile project(':elasticsearch-joda')
    compile project(':elasticsearch-joptsimple')
    compile project(':elasticsearch-log4j')
    compile project(':elasticsearch-lucene')
    compile project(':elasticsearch-securesm')
    compile project(':elasticsearch-tdigest')
    compile project(':elasticsearch-snakeyaml')

    testCompile "org.xbib.elasticsearch:elasticsearch-test-framework:${property('xbib-elasticsearch-test.version')}"
    testCompile "com.google.jimfs:jimfs:${property('jimfs.version')}"
    testCompile "com.google.guava:guava:${property('guava.version')}"

    esLibDist project(':elasticsearch-classloader')
    esLibDist project(':elasticsearch-hdrhistogram')
    esLibDist project(':elasticsearch-hppc')
    esLibDist project(':elasticsearch-jna')
    esLibDist project(':elasticsearch-joda')
    esLibDist project(':elasticsearch-joptsimple')
    esLibDist project(':elasticsearch-log4j')
    esLibDist project(':elasticsearch-lucene')
    esLibDist project(':elasticsearch-securesm')
    esLibDist project(':elasticsearch-tdigest')
    esLibDist project(':elasticsearch-snakeyaml')

    rootProject.esmodules.each { module ->
        if (rootProject.file(module).exists()) {
            add('esModuleDist', project(path: ":${module}", configuration: 'esdist'))
        }
    }
    rootProject.esplugins.each { plugin ->
        if (rootProject.file(plugin).exists()) {
            add('esPluginDist', project(path: ":${plugin}", configuration: 'esdist'))
        }
    }
    // our modules
    esModuleDist project(path: ":transport-netty4", configuration: "esdist")
    esModuleDist group: "org.xbib.elasticsearch", name: "elasticsearch-analysis-common",
            version: "${property('elasticsearch-analysis-common.version')}", ext:"zip"
    // our plugins
    if (profile == 'extended') {
        esPluginDist group: "org.xbib.elasticsearch.plugin", name: "elasticsearch-plugin-bundle",
                version: "${property('elasticsearch-plugin-bundle.version')}", ext: "zip"
    }
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    compileTestJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked",
                    "-proc:none",
                    //'--module-path', classpath.asPath,
                    //'--add-modules', 'junit',
                    //'--add-reads', "$moduleName=junit",
                    //'--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath
            ]
            //classpath = files()
        }
    }
    javadoc {
        enabled = true
        inputs.property("moduleName", moduleName)
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
    jar {
        inputs.property("moduleName", moduleName)
        manifest {
            attributes(
                    'Implementation-Title': "${project.group}#${project.name};${project.version}",
                    'Implementation-Version': version,
                    'Implementation-Vendor': "${user}",
                    'Change': grgit.head().abbreviatedId,
                    'Branch': grgit.head().id,
                    'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),
                    'Build-Java-Version': System.getProperty("java.version"),
                    'X-Compile-Source-JDK': compileJava.targetCompatibility,
                    'X-Compile-Target-JDK': compileJava.sourceCompatibility,
                    'X-Compile-Elasticsearch-Version': version,
                    'X-Compile-Lucene-Version': project.property('lucene.version'),
                    'X-Compile-Elasticsearch-Snapshot': false,
                    'Main-Class': 'org.elasticsearch.bootstrap.Elasticsearch'
            )
        }
    }
}

task injectGradleProperties(type: Copy) {
    from rootProject.file('gradle.properties')
    into 'build/resources/main'
    expand([
            'timestamp': new Date().format('yyyyMMddHHmmss')
    ])
}
processResources.finalizedBy injectGradleProperties

test {
    enabled = false
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}
// do not run randomized tests
randomizedTest.enabled = false
// run Elasticsearch test suite
esTest.enabled = false

task generateModulesList {
    File modulesFile = new File(buildDir, 'generated-resources/modules.txt')
    processResources.from(modulesFile)
    inputs.property('modules', rootProject.esmodules)
    outputs.file(modulesFile)
    doLast {
        modulesFile.parentFile.mkdirs()
        modulesFile.setText(rootProject.esmodules.join('\n'), 'UTF-8')
    }
}

task generatePluginsList {
    File pluginsFile = new File(buildDir, 'generated-resources/plugins.txt')
    processResources.from(pluginsFile)
    inputs.property('plugins', rootProject.esplugins)
    outputs.file(pluginsFile)
    doLast {
        pluginsFile.parentFile.mkdirs()
        pluginsFile.setText(rootProject.esplugins.join('\n'), 'UTF-8')
    }
}

processResources {
    dependsOn generateModulesList, generatePluginsList
    rootProject.esmodules.each { module ->
        if (rootProject.file(module).exists()) {
            dependsOn ":${module}:bundlePlugin"
        }
    }
}

clean {
    delete fileTree('.') { include '.local*.log' }
}

forbiddenPatterns {
    exclude '**/*.json'
    exclude '**/*.jmx'
}

thirdPartyAudit.excludes = [
        // classes are missing!

        // from jackson
        'javax.activation.DataHandler',
        'javax.activation.DataSource',
        'javax.xml.bind.JAXBElement',
        'javax.xml.bind.annotation.XmlAccessOrder',
        'javax.xml.bind.annotation.XmlAccessType',
        'javax.xml.bind.annotation.XmlAccessorOrder',
        'javax.xml.bind.annotation.XmlAccessorType',
        'javax.xml.bind.annotation.XmlAttribute',
        'javax.xml.bind.annotation.XmlElement$DEFAULT',
        'javax.xml.bind.annotation.XmlElement',
        'javax.xml.bind.annotation.XmlElementRef',
        'javax.xml.bind.annotation.XmlElementRefs',
        'javax.xml.bind.annotation.XmlElementWrapper',
        'javax.xml.bind.annotation.XmlElements',
        'javax.xml.bind.annotation.XmlEnum',
        'javax.xml.bind.annotation.XmlEnumValue',
        'javax.xml.bind.annotation.XmlID',
        'javax.xml.bind.annotation.XmlIDREF',
        'javax.xml.bind.annotation.XmlRootElement',
        'javax.xml.bind.annotation.XmlSeeAlso',
        'javax.xml.bind.annotation.XmlTransient',
        'javax.xml.bind.annotation.XmlType',
        'javax.xml.bind.annotation.XmlValue',
        'javax.xml.bind.annotation.adapters.XmlAdapter',
        'javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter$DEFAULT',
        'javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter',
        'javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters',
        'org.codehaus.stax2.LocationInfo',
        'org.codehaus.stax2.XMLStreamLocation2',
        'org.codehaus.stax2.XMLStreamReader2',
        'org.codehaus.stax2.XMLStreamWriter2',
        'org.codehaus.stax2.io.Stax2ByteArraySource',
        'org.codehaus.stax2.io.Stax2CharArraySource',
        'org.codehaus.stax2.ri.Stax2ReaderAdapter',
        'org.codehaus.stax2.ri.Stax2WriterAdapter',

        // from log4j
        'org.fusesource.jansi.Ansi',
        'org.fusesource.jansi.AnsiRenderer$Code',
        'com.lmax.disruptor.BlockingWaitStrategy',
        'com.lmax.disruptor.BusySpinWaitStrategy',
        'com.lmax.disruptor.EventFactory',
        'com.lmax.disruptor.EventTranslator',
        'com.lmax.disruptor.EventTranslatorTwoArg',
        'com.lmax.disruptor.EventTranslatorVararg',
        'com.lmax.disruptor.ExceptionHandler',
        'com.lmax.disruptor.LifecycleAware',
        'com.lmax.disruptor.RingBuffer',
        'com.lmax.disruptor.Sequence',
        'com.lmax.disruptor.SequenceReportingEventHandler',
        'com.lmax.disruptor.SleepingWaitStrategy',
        'com.lmax.disruptor.TimeoutBlockingWaitStrategy',
        'com.lmax.disruptor.WaitStrategy',
        'com.lmax.disruptor.YieldingWaitStrategy',
        'com.lmax.disruptor.dsl.Disruptor',
        'com.lmax.disruptor.dsl.ProducerType',
        'javax.jms.Connection',
        'javax.jms.ConnectionFactory',
        'javax.jms.Destination',
        'javax.jms.JMSException',
        'javax.jms.MapMessage',
        'javax.jms.Message',
        'javax.jms.MessageConsumer',
        'javax.jms.MessageProducer',
        'javax.jms.Session',
        'org.apache.commons.compress.compressors.CompressorStreamFactory',
        'org.apache.commons.compress.utils.IOUtils',
        'org.apache.commons.csv.CSVFormat',
        'org.apache.commons.csv.QuoteMode',
        'org.jctools.queues.MessagePassingQueue$Consumer',
        'org.jctools.queues.MpscArrayQueue',
        'org.osgi.framework.AdaptPermission',
        'org.osgi.framework.AdminPermission',
        'org.osgi.framework.Bundle',
        'org.osgi.framework.BundleActivator',
        'org.osgi.framework.BundleContext',
        'org.osgi.framework.BundleEvent',
        'org.osgi.framework.BundleReference',
        'org.osgi.framework.FrameworkUtil',
        'org.osgi.framework.ServiceRegistration',
        'org.osgi.framework.SynchronousBundleListener',
        'org.osgi.framework.wiring.BundleWire',
        'org.osgi.framework.wiring.BundleWiring',
        'org.zeromq.ZMQ$Context',
        'org.zeromq.ZMQ$Socket',
        'org.zeromq.ZMQ'
]

dependencyLicenses.enabled = false

// jarHell checks runtimeClasspath, but why is there log4j? must be overlay problem with older elasticsearch
/*
> Task :server:jarHell FAILED
checking for jar hell...
Exception in thread "main" java.lang.IllegalStateException: jar hell!
class: org.apache.logging.log4j.core.appender.AbstractAppender$Builder
jar1: /Users/joerg/Projects/github/jprante/elasticsearch-xbib/elasticsearch-log4j/build/libs/elasticsearch-log4j-6.3.2.0.jar
jar2: /Users/joerg/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-core/2.11.1/592a48674c926b01a9a747c7831bcd82a9e6d6e4/log4j-core-2.11.1.jar
	at org.elasticsearch.bootstrap.JarHellForJava9.checkClass(JarHellForJava9.java:260)
	at org.elasticsearch.bootstrap.JarHellForJava9.checkJarHell(JarHellForJava9.java:173)
	at org.elasticsearch.bootstrap.JarHellForJava9.checkJarHell(JarHellForJava9.java:70)
	at org.elasticsearch.bootstrap.JarHellForJava9.main(JarHellForJava9.java:52)

 */
jarHell.enabled = false
loggerUsageCheck.enabled = true

archivesBaseName = 'elasticsearch'

def rhelDistCopySpec = copySpec {
    into("elasticsearch-${version}") {
        into('bin') {
            from("build/tmp/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin/elasticsearch")
            rename { String filename -> "elasticsearch-${project.profile}" }
            fileMode 0550
        }
        into('conf') {
            from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/conf/jvm.options"
            rename { String filename -> "elasticsearch-${project.profile}-jvm.options" }
        }
        into('conf') {
            from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/conf/elasticsearch.json"
            rename { String filename -> "elasticsearch-${project.profile}-config.json" }
        }
        into('conf') {
            from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/conf/log4j2.json"
            rename { String filename -> "elasticsearch-${project.profile}-log4j2.json" }
        }
        into('lib') {
            from configurations.esLibDist
        }
        into('lib') {
            from distsDir
            include "elasticsearch-${version}.jar"
            rename { String filename -> "elasticsearch-${project.property('elasticsearch.version')}.jar" }
        }
        into("logs") {
            from("src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/log/.empty")
        }
        project.configurations.esModuleDist.each { artifact ->
            into("elasticsearch-${version}/modules/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip', '')}") {
                from zipTree(artifact)
            }
        }
        project.configurations.esPluginDist.each { artifact ->
            into("elasticsearch-${version}/plugins/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip','')}") {
                from zipTree(artifact)
            }
        }
    }
}

task rhel7BinCopyTar(type: Copy) {
    group = 'linux'
    from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin"
    into "build/tmp/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin"
    expand([
            'profile' : "${project.profile}"
    ])
}

task rhel7BinCopyZip(type: Copy) {
    group = 'linux'
    from "src/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin"
    into "build/tmp/dist/rhel7-x86_64/tar/java-${compileJava.targetCompatibility}/${project.profile}/bin"
    expand([
            'profile' : "${project.profile}"
    ])
}

task rhel7BinCopyRpm(type: Copy) {
    group = 'linux'
    from "src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/bin"
    into "build/tmp/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/bin"
    expand([
            'profile' : "${project.profile}"
    ])
}

task rhel7DistTar(type: Tar) {
    dependsOn 'jar', 'rhel7BinCopyTar'
    group = 'linux'
    baseName 'elasticsearch-server'
    version project.version
    appendix "${project.profile}.java-${compileJava.targetCompatibility}"
    compression Compression.GZIP
    extension 'tar.gz'
    with rhelDistCopySpec
}

task rhel7DistZip(type: Zip) {
    dependsOn 'jar', 'rhel7BinCopyZip'
    group = 'linux'
    baseName 'elasticsearch-server'
    version project.version
    appendix "${project.profile}.java-${compileJava.targetCompatibility}"
    with rhelDistCopySpec
}

task rhel7DistRpm(type: Rpm) {
    dependsOn 'jar', 'rhel7BinCopyRpm'
    group = 'linux'
    packageName 'elasticsearch-server'
    version project.version
    release "${project.release}.${project.profile}"
    arch X86_64
    os LINUX
    license 'Apache License 2.0'
    packager 'Jörg Prante < joergprante@gmail.com>'
    vendor 'xbib'
    description description
    url 'https://github.com/jprante/elasticsearch-server'
    user 'es'
    preInstall "src/dist/rhel7-x86_64/rpm/preInstall.sh"
    postInstall "src/dist/rhel7-x86_64/rpm/postInstall.sh"
    preUninstall "src/dist/rhel7-x86_64/rpm/preUninstall.sh"
    postUninstall "src/dist/rhel7-x86_64/rpm/postUninstall.sh"
    into('/opt') {
        addParentDirs = false
        into("elasticsearch-${version}") {
            into('bin') {
                addParentDirs = false
                fileMode 0550
                from "build/tmp/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/bin/elasticsearch"
                rename { String filename -> "elasticsearch-${project.profile}" }
            }
            into('conf') {
                from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/conf/jvm.options")
                rename { String filename -> "elasticsearch-${project.profile}-jvm.options" }
            }
            into('conf') {
                from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/conf/elasticsearch.json")
                rename { String filename -> "elasticsearch-${project.profile}-config.json" }
            }
            into('conf') {
                from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/conf/log4j2.json")
                rename { String filename -> "elasticsearch-${project.profile}-log4j2.json" }
            }
            into('lib') {
                from configurations.esLibDist
            }
            into('lib') {
                from distsDir
                include "elasticsearch-${version}.jar"
                rename { String filename -> "elasticsearch-${project.property('elasticsearch.version')}.jar" }
            }
            into('logs') {
                from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/log/.empty")
            }
        }
    }
    project.configurations.esModuleDist.each { artifact ->
        into("/opt/elasticsearch-${version}/modules/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip', '')}") {
            from zipTree(artifact)
        }
    }
    project.configurations.esPluginDist.each { artifact ->
        into("/opt/elasticsearch-${version}/plugins/${artifact.name.replaceAll('\\-[\\.\\d]*?.zip','')}") {
            from zipTree(artifact)
        }
    }
    into('/etc/systemd/system') {
        addParentDirs = false
        from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/etc/systemd/system/elasticsearch.service")
        rename { String filename -> "elasticsearch.service" }
    }
    into('/etc/sysconfig') {
        addParentDirs = false
        from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/etc/sysconfig/elasticsearch")
        rename { String filename -> "elasticsearch-${project.profile}" }
    }
    into('/etc/security/limits.d') {
        addParentDirs = false
        from("src/dist/rhel7-x86_64/rpm/java-${compileJava.targetCompatibility}/${project.profile}/etc/security/limits.d")
        rename { String filename -> "elasticsearch-${project.profile}" }
    }
    link('/opt/elasticsearch', "/opt/elasticsearch-${version}")
    if (project.hasProperty('signing.keyId')) {
        signingKeyId = project.property('signing.keyId')
        signingKeyPassphrase = project.property('signing.password')
        signingKeyRing = project.property('signing.secretKeyRingFile')
    }
    doLast {
        File gradleProperties = file("${rootProject.projectDir}/gradle.properties")
        if (gradleProperties.exists()) {
            String content = gradleProperties.text
            Integer nextRelease = Integer.parseInt(project.release) + 1
            println "release: ${project.release} next release: ${nextRelease}"
            gradleProperties.write(content.replace("\nrelease = ${project.release}\n", "\nrelease = ${nextRelease}\n"))
        }
    }
}

docker {
    name "jprante/elasticsearch-server"
    dependsOn rhel7DistTar
    files tasks.rhel7DistTar.outputs
}

artifacts {
    archives javadocJar, sourcesJar, rhel7DistTar, rhel7DistZip, rhel7DistRpm
}
