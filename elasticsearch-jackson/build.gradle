
ext {
    moduleName = 'org.xbib.elasticsearch.jackson'
}

configurations {
    source
    binary
}

sourceSets {
    generated {
        java {
            srcDir "$buildDir/generated-src"
        }
        output.dir("$buildDir/generated-src", builtBy: 'sourceDownload')
    }
    main {
        java {
            srcDirs += sourceSets.generated.java.srcDirs
        }
    }
}

dependencies {
    source "com.fasterxml.jackson.core:jackson-annotations:${property('jackson.version')}:sources"
    source "com.fasterxml.jackson.core:jackson-core:${property('jackson.version')}:sources"
    source "com.fasterxml.jackson.core:jackson-databind:${property('jackson-databind.version')}:sources"
    source "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${property('jackson.version')}:sources"
    source "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${property('jackson.version')}:sources"
    source "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${property('jackson.version')}:sources"
    // xml required by log4j2
    source "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${property('jackson.version')}:sources"
    source "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${property('jackson.version')}:sources"
    compile project(":elasticsearch-snakeyaml")

    // XML is completely optional, not used by us, but by log4j2
    compileOnly "javax.xml.bind:jaxb-api:2.4.0-b180725.0427" // this is an external java.xml.bind, a named module jar
    compileOnly "com.fasterxml.woodstox:woodstox-core:${property('woodstox.version')}"
    compileOnly "org.codehaus.woodstox:stax2-api:${property('stax2.version')}"
}

task unpackSource(type: Copy) {
    configurations.source.each {
        if (it.toString().endsWith('sources.jar')) {
            from zipTree(it)
            into "$buildDir/generated-src/java"
            exclude '**/Java7SupportImpl.java'
            exclude '**/JaxbAnnotationIntrospector.java'
        }
    }
}

task unpackResources(type: Copy) {
    dependsOn unpackSource
    configurations.binary.each {
        from zipTree(it)
        into "$buildDir/resources/main"
    }
}

afterEvaluate {
    compileJava {
        dependsOn unpackSource, unpackResources
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = ['--module-path', classpath.asPath]
            classpath = files()
        }
    }
    javadoc {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
}

task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

artifacts {
    archives sourcesJar, javadocJar
}
